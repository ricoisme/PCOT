■PCOTのソースについて

【概要】
    PCOTのソースをダウンロードして下さってありがとうございます。
    作者が登録嫌い(笑)なため、この様な配布方法になったことをお許しください。
    PCOTは最初VisualStudio2015で作成し、途中からVisualStudio2019に切り替わりました。
    ただし、.NetFrameworkは作成時と変わらず4.5.2です。最新の.NetFrameworkだと利用者にインストール作業を強いる場合もあるので
    それを嫌って、4.5.2を貫き通しました。
    
    
【PCOTのビルド〜起動方法】
    1．「PCOT.sln」を実行し、ソリューションを起動します。
    2．上部メニューから「ソリューションをリビルド」を選択してください。
    3．ビルドが正常に終わったら「pcot_src」フォルダ配下に「exe」フォルダが作成されます。
    4．「pcot_src\exe\x86\Debug(Release)」フォルダ内に色々とファイルが作成される筈です。
    5．「4」が確認できたら「pcot_src\dll」フォルダの中身を全部「pcot_src\exe\x86\Debug(Release)」フォルダにコピーしてください。
    6．「PCOT.exe」を実行し、PCOTが正常動作したら成功です。
    
    
【PCOTの構想メモ】
    synctamさんに倣って、こちらでPCOTは本当はこうしたかったという構想を列挙します。
    PCOTのソースを参考にされる方の何かヒントになれば幸いです。
    
    以下構想です。
    ・PCOTは必ず何かしらのプロセスに接続する仕様ですが、接続しない方式も選べるようにしたかった。
        →デスクトップの画面上をどこでも自由に翻訳できるようにしたかったんです。もちろん固定翻訳込みで。
        
    ・上記と被りますが、接続解除機能が欲しかった。
        →翻訳表示画面で接続を解除した場合に、デスクトップ翻訳に切り替えれるようにしたかったです。(2020/11/15追記：対応しました。)
        
    ・プロセス名を任意のタイトルで管理できる仕組みを作りたかった。
        →これは「Game.exe」などよくあるプロセス名だと、固定翻訳や名詞登録が被るんです。なので重複できない任意のタイトルを付けて
        　分けられるようにしたかったです。(2020/11/07追記：別名プロセスという形で対応しました。)
        
    ・ファイル(フォルダ)構成の見直し
        →現在のPCOTは「data」フォルダの中に生のまま[プロセス名.cfg]ファイルが並んでいる状態ですが、画像翻訳を実装した段階で
        　このフォルダ構成が冗長になってしまいました。
        　
        　現行：
        　  dataフォルダ
        　      [プロセス1].cfg
        　      [プロセス2].cfg
        　  imageフォルダ
        　      [プロセス1]フォルダ
        　          [プロセス1]_001.png
        　          
        　構想：
        　  dataフォルダ
        　      [任意タイトル]フォルダ
        　          settingフォルダ
        　              [任意タイトル].cfg
        　          imageフォルダ
        　              [任意タイトル]_001.png
        　
        　上記の構想の様にすることによって、ゲームをアンインストールした後に[任意タイトル]フォルダごと削除すれば
        　設定が一々残ることもないというメリットがあります。
        　
    ・辞書登録の置換機能をもっと柔軟に色々できるようにしたかった。
        →これは辞書登録時に登録行をプロセス名か共通で選べるようにして、辞書機能を共通単位やプロセス単位で有効/無効を切り替えられるようにしたり
        　プロセス名でフィルタリングしたりという柔軟な要素を足したかったです。(2020/10/06追記：対応しました。)
        　ついでに言えば語句検索機能も付けたかったです。(曖昧検索やら後方一致やら)
        　
    ・画像翻訳をもっと有効利用したかった
        →画像翻訳はアフィン変換という機構を使って実装していますが、このアフィン変換がかなり素晴らしいものでした。
        　ポイントとして以下が挙げられます。
        　・オフセット描画を行うため、ものすごく拡大してもメモリを食わない
        　・逆に大きすぎる文字を自由に縮小できる(大きすぎる文字は逆にOCRの精度が下がる傾向にあります)
        　・画像の拡大率、表示領域の画像のオフセット座標を覚えておくことができる(退避/復元が容易)
        　
        　上記のポイントを踏まえて、この機構をクラス化して再利用すれば、もっと可能性が広がったと思うのです。
        　以下に詳細な例を示します。
        　【フリー選択】
        　  1．画像加工のオプションをチェック(チェックなしの場合は通常のPCOTと同様の動作)
        　  2．対象プロセスの画面全体のスクリーンショットを取得
        　  3．画像翻訳のような専用画面にスクリーンショットを表示
        　  4．拡大率、画像の座標、閾値選択可能な二値化、コントラストの増減などを設定
        　  5．確定でOCR→翻訳
        　  1〜4の動作を覚えておき、翻訳ボタンで直前の設定を何度でも再現可能
        　  
        　【固定翻訳】
        　  1．任意のラベルタイトル設定
        　  2．新規作成ボタン押下
        　  3．【フリー選択】の1〜4の設定を行う
        　  4．確定でOCR→翻訳
        　  以上の動作を設定ファイルに保存して、翻訳ボタンで何度でも再現可能
        　
        　といった感じです。
        　★この方式の最大のメリットは「フルスクリーンにも対応できる」という点にあります。
        　　あとは細かい画像編集を行うことにより、OCRの読取精度の向上を期待できます。
        　　※現行PCOTでも画像翻訳を使えばフルスクリーンのゲームでも一応翻訳自体は可能です。
        　　　シームレスにできないのが難点ですがｗ
        　
        　
【PCOTを作る際に参考にしたサイト＆お友だち】
    こちらでPCOTを制作するにあたってお世話になった方々を紹介します。
    ・synctamさん
        全てはここから始まりました。
        「synctamの雑談日記：ゲーム画面翻訳ツール作成中・・・その１」
        https://synctamdiary.blogspot.com/2018/12/hdd-eschalon-book-eschalon-book-ocr-ocr.html
        こちらの記事から、プロセス接続、固定翻訳のヒントを頂きました。
        爆速の「Windows10 OCR」を(暗に？)提案して下さった方でもあります。
        
    ・Spoonailさん
        PCOTを公開後に仲良くさせてもらってます。高DPIの不具合を最初に指摘してくださった方でもあります。
        (その後同系統の違うバグがぶり返しましたがｗ)
        https://whiteblackspace.hatenablog.com/entry/2019/10/17/001003
        「SSTR」というOCR翻訳ツールを公開されていますが、スクリーンショットをOCRで読み取るというのに閃きを得て
        画像翻訳が生まれました。

    ・kengo700さん
        synctamさんと共にスクロールキャプチャーの実装方法について色々と手法を考えて下さった「戦友」ですｗ
        https://www.tranaz.com/home
        ゲームを直接翻訳するPCOTとは分野は違いますが、自身で翻訳作業をこなされている他、ゲーム中の日本語訳にルビを振ったり、フォントを編集して
        より品質の高いユーザー体験を提供するため、日々尽力している熱い方です。
        
    ・WiNCHaNさん
        http://winchan.sx3.jp/blog/
        PCOTのDeepLと連携する機能はもしかすると「OCR2DeepL」から発想を得たと思われるかもしれませんが実は違います。
        PCOTがある程度完成したあと、どうしても翻訳精度が気に入らなくて何かないか探していたときに、丁度DeepLクライアントを
        みつけ「ショートカットを疑似入力すればDeepLと連携できるのでは？」と考え実装した結果です。
        WiNCHaNさんの存在を知ったのはPCOTを公開した後で「同じことを考える人もいるんだな」と感心しました。
        結構名の通った方なので、ネット上でも(笑)引きこもりだった作者は内心ビビってましたが、本当に良い方です。
        勇気を出して声をかけて良かったと思っています。そしていつもお世話になってます。
        
    ・お〜るげーむず（仮）さん
        https://agk.saloon.jp/
        PCOTの更新にあたってTwitter上で日々応援してくださってくれた方です。
        「そこに山(海外のゲーム)があれば登る！(翻訳する！)」な勢いで日本語化に熱心な方です。
        くじけそうな時、Twitter上でこの方から「いいね」を貰うたびに奮い立ったものです。
        
    ・かくすけさん
        https://kakusuke98.hatenablog.com/archive/category/CapTra
        最初PCOTを作る際に「無料で際限なく使えるOCRが全然ない！」と絶望したものの「Windows10 OCR」というものを知り、こちらのブログに辿り着いたものの
        何故か自分の環境では上手く行かず諦めてTesseractを利用した経緯があるのですが(お陰でWindows10以外でもPCOTが対応出来てるんですがｗ)
        その後Windows10 OCRの速さに心を奪われて、再度お世話になりましたｗ
        どうして今まで気づかなかったのか自分でも不思議なんですが、PCOTが完成する前から既にCapTraという類似アプリを開発されていたようです。
        PCOTと同じくWindows10限定ですが「Windows10 OCR」と「Tesseract OCR」という二つのOCRエンジンを選択できるツールの元祖は間違いなくこの方が
        発祥だと思います。
        まだベータ版との事ですので、いずれ凄いツールに進化することを期待しています！
        【2020/12/06：追記】
        かくすけさんのお陰でPCOTのGoogle翻訳にGASが追加されました！かくすけさんはPCOTの恩人です！これからは女神と呼びましょう！

■最後に
    現状、世の中には「日本語化を行う翻訳者向けのソフト」はそれなりにありますが「ゲームを直接翻訳するソフト」は残念ながら少ないです。
    しかしEschalonのように技術的にどうやっても日本語化出来ないゲームや発売直後で有志翻訳が間に合わないゲーム、残念ながら公式でも有志からも
    翻訳されなかったゲームなど需要は確かにあります。
    今の所、OCR翻訳ツールのグローバルスタンダードは日本も含めてCapture2Text一択な状態ですが、私はこの状況に疑問を呈しています。
    何故なら、Capture2Textは素晴らしいソフトではありますが、グローバル向けのソフトだからです。
    確かに汎用性においては申し分ないと思います。しかし、日本人に向けて作られた専用のソフトの方がより良いユーザー体験をもたらすのは明白です。
    UIが英語でソフトに精通できなかったり、OCRの読取精度向上に対するアプローチが希薄だったり、特定の状況で翻訳を行えない構造上の欠陥など
    古いソフトだから仕方ないと言ってしまえばそれまでですが、だからと言ってそれを我慢するという選択肢はあって欲しくないと思っています。
    「Capture2Textが有名だから」なんて理由は論外です。
    
    無いなら作ればいいのです。実は私はPCOTが日本においてもCapture2Textのシェアを奪えるとは思っていません。
    そもそも知名度が足りないし、利便性を重視する余り速度性能はおざなりです。(劣化と言われたら猛反発しますがｗ)
    しかしその代わりにスクロールキャプチャーや、専用画面による画像翻訳、翻訳範囲選択中のプロセスの停止、無制限に設定できる固定翻訳、複数のOCRエンジンの選択方式、
    UWPのデスクトップ化、直前の動作の記憶、辞書登録や名詞登録、履歴登録に原文の段落の再現、読取倍率の変更、簡易コマンド画面、DeepLとの連携や連携方式の選択、
    OCRで読み損なった文字を訳文を選択して原文で強調表示、機械翻訳に最適化した大文字小文字の変換など、制作する上で得た気づきを全て盛り込みました。
    少なくとも現時点ではPCOTは良い意味でも悪い意味でも機能動作的な意味で最先端を突っ走っていると自負しています。
    私が実際何をしたかったかと言えば、後進の人たちに資産を残したかったのです。
    
    もし、私がsynctamさんの構想からヒントを得てPCOTを作った様に、PCOTのソースを参考にして誰かがCapture2TextもPCOTも超える
    素晴らしいツールを作ってくれたらこれに勝る喜びはありません。
    WPFや他の言語でUIをオシャレにしてもいいし、速度性能の最適化を行ってもいいし、新たにより便利な機能を追加したり、自由に改変改造
    して頂いて構いません。ただし、ソースに対しての苦情は受け付けませんｗ
    私はCapture2Textが世界のグローバルスタンダードと呼ばれても「日本ではこのソフト一択」と言われる将来を夢見ています。
    そして、それはPCOTである必要はないのです。ですが、それは日本人の手によって成し遂げられるべきだと信じています！
    
    全ての洋ゲーマーに想いを込めて。
    
                                                                                            2020年9月15日　ぬるっぽ


■ライセンス
GoogleTranslateFreeApi v1.1.1
https://www.nuget.org/packages/GoogleTranslateFreeApi/1.0.1/license
Tesseract v4.1.0-beta1
http://www.apache.org/licenses/LICENSE-2.0
NewtonSoft.Json
https://www.nuget.org/packages/Newtonsoft.Json/12.0.2/license

※PCOTも一応MITライセンスということにしておきますｗ
誰かが作る翻訳ソフトのReadMeの片隅に「ぬるっぽさんのPCOTを参考にして作りました。」
なんて書いてあったら多分泣いて喜びますｗ

■お問合せ
HP
http://www.gc-net.jp/s_54/の掲示板

Twitter
https://twitter.com/PcotNullpoのDM

まで
